(ns tasks
  (:require
   [clojure.string :as string]
   [babashka.fs :as fs]
   [dates :as dates]
   [tick.core :as t]
   ))

(defn log [& args]
  (apply println args))

;; vars/static data

(def repo-dir (str (fs/home) "/russmatney/blog"))
(def docs-dir (str repo-dir "/docs"))
(def posts-dir (str repo-dir "/docs/posts"))
(def hundos-dir (str repo-dir "/docs/posts/100-worders"))
(def techsposure-dir (str repo-dir "/docs/posts/techsposure"))
(def getitwrite-dir (str repo-dir "/docs/posts/getitwrite"))
(def groks-dir (str repo-dir "/docs/posts/groks"))
(def org-garden-dir (str (fs/home) "/todo/garden"))
(def org-daily-dir (str (fs/home) "/todo/daily"))

(def generated-page-preamble
  "<!--- HELLO WORLD!!! \n  this page was GENERATED by some tasks.clj!\n  so-mind-ya-bizniz. --->\n\n")

(def side-bar-top-links
  "
* [Home](/home)
* [Dev Logs](/devlogs/)
* [Portfolio](/portfolio/)
* [Posts](/posts/)

--

")

(def gened-page-defs
  [{:directory     hundos-dir
    :index-content (str "
## 100 Word Stories

Known colloquially as hundos.
")}
   {:directory   techsposure-dir
    :index-title "Techsposure"}
   {:directory   getitwrite-dir
    :index-title "Get It? Write!"}
   {:directory     groks-dir
    :index-title   "GROKs"
    :index-content (str "
## GROKs

Notes and hopefully specific things I'm trying to understand better.
")}])


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; data getters

;; posts

(defn parse-datey-fname [fname]
  (let [date-matches (re-seq #"(\d{4}-\d{2}-\d{2})-" fname)
        date         (some-> date-matches first last dates/parse-time-string)
        title        (cond-> fname
                       (some-> date-matches first last)
                       (string/replace (-> date-matches first first) "")

                       true
                       (string/replace ".md" ""))
        ]
    {:title title
     :date  date
     ;; :matches date-matches
     }))

(comment
  (parse-datey-fname "2022-04-22-bloodie-blah.md"))

(defn ->post
  [{:keys [garden-path]
    :as   post}]
  (let [path          (:post/path post garden-path)
        fname         (fs/file-name path)
        {title :title
         date  :date} (parse-datey-fname fname)]
    (cond-> post
      true (assoc
             :post/title title
             :post/fname fname
             :post/parent-fname (fs/file-name (fs/parent path))
             :post/last-modified (fs/file-time->millis (fs/last-modified-time path))
             ;; last time git-touched (all times git-touched?)
             ;; category
             )

      (:post/path post) (assoc :post/relative-url (string/replace path docs-dir ""))
      date              (assoc :post/date-created date))
    ))


(defn sort-latest-first [posts]
  (->> posts
       (sort-by (some-fn :post/date-created :post/last-modified) dates/sort-latest-first)))

(defn sort-oldest-first [posts]
  (->> posts
       (sort-by (some-fn :post/date-created :post/last-modified) dates/sort-chrono)))

;; post getters

(defn posts-in-dir [directory]
  (->> (fs/glob (str directory) "*.md")
       (map (fn [path] (->post {:post/path (str path)})))))

(defn local-posts []
  (->> (concat (fs/glob (str posts-dir) "*.md")
               (fs/glob (str posts-dir) "**/*.md"))
       (map (fn [path] (->post {:post/path (str path)})))
       ))

(defn hundos-posts []
  (posts-in-dir hundos-dir))

(comment
  (local-posts)
  (hundos-posts))

(defn garden-posts []
  (->> (fs/glob (str org-garden-dir) "*.org")
       (map (fn [path] (->post {:garden-path path})))))

(defn daily-posts []
  (->>
    (fs/glob (str org-daily-dir) "*.org")
    (map (fn [path] (->post {:garden-path path})))))

(comment
  (garden-posts)
  (daily-posts))

;; posts side bar

(defn write-page [{directory :directory
                   posts     :posts
                   path      :path
                   ->text    :->text
                   preamble  :preamble}]
  (let [path  (str directory "/" path)
        posts (->> (or posts (posts-in-dir directory))
                   (remove (fn [{fname :post/fname}]
                             (#{"README.md" "_sidebar.md"} fname)))
                   sort-latest-first)
        post-links
        (->> posts
             (group-by (fn [post] (t/format "MMMM YYYY" (:post/date-created post))))
             (sort-by #(-> % second first :post/date-created) dates/sort-latest-first)
             (mapcat (fn [[group posts]]
                       [(str "\n\n" group "\n\n")
                        (->> posts
                             (sort-by :post/date-created dates/sort-latest-first)
                             (map ->text) (string/join "\n"))])))]
    (log "Writing to" path)
    (spit path
          (str preamble (string/join "\n" post-links)))))

(defn write-sidebar [{:as         opts
                      index-title :index-title}]
  (write-page (assoc opts
                     :path "_sidebar.md"
                     :->text (fn [{:post/keys [relative-url title]}]
                               (str "* [" title "](" relative-url ")"))
                     :preamble (str generated-page-preamble side-bar-top-links
                                    (cond
                                      index-title (str index-title))))))

(defn write-index
  [{:as           opts
    index-title   :index-title
    index-content :index-content}]
  (write-page (assoc opts
                     :path "README.md"
                     :->text (fn [{:post/keys [relative-url title]}]
                               (str "* [" title "](" relative-url ")"))
                     :preamble (str generated-page-preamble
                                    (cond
                                      index-content index-content
                                      index-title   (str "# " index-title))))))


(comment
  (write-index {:directory hundos-dir}))

(defn regen-all-pages []
  (->> gened-page-defs
       (map (fn [opts]
              (write-index opts)
              (write-sidebar opts)))
       doall))

(comment
  (regen-all-pages)
  (dates/now)
  )
