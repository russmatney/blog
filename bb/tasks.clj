(ns tasks
  (:require
   [clojure.string :as string]
   [babashka.fs :as fs]
   [dates :as dates]
   [tick.core :as t]
   ))

(defn log [& args]
  (apply println args))

;; vars/static data

(def repo-dir (str (fs/home) "/russmatney/blog"))
(def docs-dir (str repo-dir "/docs"))

(def posts-dir (str repo-dir "/docs/posts"))
(def hundos-dir (str repo-dir "/docs/posts/100-worders"))
(def techsposure-dir (str repo-dir "/docs/posts/techsposure"))
(def getitwrite-dir (str repo-dir "/docs/posts/getitwrite"))
(def groks-dir (str repo-dir "/docs/posts/groks"))

(def devlogs-dir (str repo-dir "/docs/devlogs"))

(def org-garden-dir (str (fs/home) "/todo/garden"))
(def org-daily-dir (str (fs/home) "/todo/daily"))

(def generated-page-preamble
  "<!--- HELLO WORLD!!! \n  this page was GENERATED by some tasks.clj!\n  so-mind-ya-bizniz. --->\n\n")

(def sidebar-top-links
  "
* [Home](/)
* [About](/about.md)
* [Dev Logs](/devlogs/)
* [Portfolio](/portfolio/)
* [Posts](/posts/)")


(def sidebar-top-links-with-post-categories
  (str
    sidebar-top-links
    "
  * [100 word stories](/posts/100-worders/)
  * [Techsposure](/posts/techsposure/)
  * [Get It Write](/posts/getitwrite/)
  * [Groks](/posts/groks/)
"))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; data getters

;; posts

(defn parse-datey-fname [fname]
  (let [date-matches       (re-seq #"(\d{4}-\d{2}-\d{2})-" fname)
        year-month-matches (re-seq #"(\d{4}-\d{2})-" fname)
        date               (some-> date-matches first last dates/parse-time-string)
        year-month         (some-> year-month-matches first last)
        title              (cond-> fname
                             (some-> date-matches first last)
                             (string/replace (-> date-matches first first) "")

                             (and
                               (not (some-> date-matches first last))
                               (some-> year-month-matches first last))
                             (-> (string/replace (-> year-month-matches first first) "")
                                 (#(str year-month ": " %))
                                 )

                             true
                             (string/replace ".md" ""))
        ]
    {:title      title
     :date       date
     :year-month year-month
     ;; :matches date-matches
     }))

(comment
  (parse-datey-fname "2022-04-22-bloodie-blah.md")
  (parse-datey-fname "faves.md")
  )

(defn ->post
  [{:keys [garden-path]
    :as   post}]
  (let [path          (:post/path post garden-path)
        fname         (fs/file-name path)
        {title :title
         date  :date} (parse-datey-fname fname)]
    ;; TODO last time git-touched (all times git-touched?)
    ;; TODO parse tags, front-matters?
    ;; TODO parse dates for non-datey-filenames
    (cond-> post
      true (assoc
             :post/title title
             :post/fname fname
             :post/parent-fname (fs/file-name (fs/parent path))
             :post/last-modified (fs/file-time->millis (fs/last-modified-time path))
             )

      (:post/path post) (assoc :post/relative-url (string/replace path docs-dir ""))
      (not (nil? date)) (assoc :post/date-created date))
    ))


(defn sort-latest-created-first [posts]
  (->> posts
       (sort-by :post/date-created dates/sort-latest-first)))

(defn sort-oldest-created-first [posts]
  (->> posts
       (sort-by :post/date-created dates/sort-chrono)))

;; post getters

(defn posts-in-dir [directory]
  (->> (fs/glob (str directory) "*.md")
       (map (fn [path] (->post {:post/path (str path)})))))

(defn local-posts []
  (->> (concat (fs/glob (str posts-dir) "*.md")
               (fs/glob (str posts-dir) "**/*.md"))
       (map (fn [path] (->post {:post/path (str path)})))
       ))

(defn hundos-posts []
  (posts-in-dir hundos-dir))

(comment
  (local-posts)
  (hundos-posts))

(defn garden-posts []
  (->> (fs/glob (str org-garden-dir) "*.org")
       (map (fn [path] (->post {:garden-path path})))))

(defn daily-posts []
  (->>
    (fs/glob (str org-daily-dir) "*.org")
    (map (fn [path] (->post {:garden-path path})))))

(comment
  (garden-posts)
  (daily-posts))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generating pages

(declare post->md-text-link)

(def gened-page-defs
  [
   {:directory      devlogs-dir
    :title          "Dev Logs"
    ;; TODO we could slurp-in the preamble, maybe up to a <!--- BLOG END PREAMBLE ---> comment?
    :index-preamble (str "

## Dev Logs

Notes, clips, commits, etc collected along the dev path.

")
    :->text (fn [post] (str "* " (post->md-text-link post)
                            (cond
                              (string/includes? (:post/fname post) "gloss") " #glossolalia")))
    ;; :sidebar-content (str "")

    :skip-group-by true}
   {:directory      posts-dir
    :title          "Posts"
    :index-preamble (str "

## Posts

Blog posts from over the years.

Some broad categories:

* [100 word stories](/posts/100-worders/)
* [Get It Write](/posts/getitwrite/)
* [groks](/posts/groks/)
* [techsposure](/posts/techsposure/)

")
    :->posts        tasks/local-posts
    :->text         (fn [post] (str "* " (post->md-text-link post)
                                     (cond
                                       (#{"techsposure"} (:post/parent-fname post)) " #techsposure"
                                       (#{"getitwrite"} (:post/parent-fname post))  " #getitwrite"
                                       (#{"groks"} (:post/parent-fname post))       " #groks"
                                       (#{"100-worders"} (:post/parent-fname post)) " #hundos")))
    :no-gen-sidebar true}
   {:directory      hundos-dir
    :index-preamble (str "
## 100 Word Stories

Known colloquially as hundos.
")
    :sidebar-preamble sidebar-top-links-with-post-categories
    }
   {:directory        techsposure-dir
    :title            "Techsposure"
    :sidebar-preamble sidebar-top-links-with-post-categories
    }
   {:directory        getitwrite-dir
    :title            "Get It? Write!"
    :sidebar-preamble sidebar-top-links-with-post-categories
    }

   {:directory        groks-dir
    :title            "GROKs"
    :sidebar-preamble sidebar-top-links-with-post-categories
    :index-preamble   (str "
## GROKs

Notes and hopefully specific things I'm trying to understand better.
")}
   ])

(def exclude-from-index #{"README.md" "_sidebar.md"})

(defn post->md-text-link
  [{:post/keys [relative-url title]}]
  (str "[" title "](" relative-url ")"))

(defn post-link-content [{directory     :directory
                          posts         :posts
                          ->text        :->text
                          skip-group-by :skip-group-by
                          }]
  (let [posts (->> (or posts (posts-in-dir directory))
                   (remove (comp exclude-from-index :post/fname))
                   sort-latest-created-first)]
    (if skip-group-by
      (->> posts
           sort-latest-created-first
           (map ->text)
           (string/join "\n"))
      (->> posts
           (group-by (fn [post] (when (:post/date-created post) (t/format "MMMM YYYY" (:post/date-created post)))))
           (sort-by (fn [[_group psts]] (some-> psts first :post/date-created))
                    dates/sort-latest-first)
           (mapcat (fn [[group posts]]
                     [(str "\n\n" (or group "Date Unspecified") "\n\n")
                      (->> posts
                           sort-latest-created-first
                           (map ->text) (string/join "\n"))]))
           (string/join "\n")))))

(defn write-page [{directory :directory
                   path      :path
                   preamble  :preamble
                   ;; a complete content overwrite
                   content   :content
                   :as       opts}]
  (let [path (str directory "/" path)]
    (log "Writing to" path)
    (spit path
          (str preamble "\n\n"
               (or content (post-link-content opts))))))


(defn write-sidebar [{:as              opts
                      title            :title
                      sidebar-content  :sidebar-content
                      sidebar-preamble :sidebar-preamble
                      }]
  (write-page (assoc opts
                     :path "_sidebar.md"
                     :->text (fn [post] (str "* " (post->md-text-link post)))
                     :preamble (str generated-page-preamble
                                    (or sidebar-preamble
                                        sidebar-top-links)
                                    (cond
                                      (and
                                        (not sidebar-preamble)
                                        title)
                                      (str "\n\n--\n\n" title "\n\n")))
                     :content sidebar-content)))

(defn write-index
  [{:as            opts
    title          :title
    index-preamble :index-preamble}]
  (write-page (assoc opts
                     :path "README.md"
                     :->text
                     (:->text opts (fn [post] (str "* " (post->md-text-link post))))
                     :preamble (str generated-page-preamble
                                    (cond
                                      index-preamble index-preamble
                                      title          (str "# " title))))))

(comment
  (write-index {:directory hundos-dir}))

(defn regen-all-pages []
  (->> gened-page-defs
       (map (fn [opts]
              (let [opts (cond-> opts
                           (:->posts opts) (assoc :posts ((:->posts opts)))
                           )]
                (write-index opts)
                (when-not (:no-gen-sidebar opts)
                  (write-sidebar opts)))))
       doall))

(comment
  (regen-all-pages)
  (dates/now)
  )
